'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useTranslation } from 'react-i18next';
import { AlertCircle, Loader } from 'lucide-react';
import { Deal } from '@/types';
import { useDealStore } from '@/store/dealStore';
import DealForm from '@/components/DealForm';
import { v4 as uuidv4 } from 'uuid';

export default function AdminDealCreate() {
  const { t } = useTranslation();
  const router = useRouter();
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [previewDeal, setPreviewDeal] = useState<Deal | null>(null);
  
  const createDeal = useDealStore(state => state.createDeal);
  
  const handleSubmit = async (dealData: Partial<Deal>) => {
    try {
      setLoading(true);
      setError('');
      
      // Remove ID if present (should be generated by the store)
      const { id, ...restData } = dealData;
      
      await createDeal(restData as Omit<Deal, 'id'>);
      router.push('/admin');
    } catch (err) {
      setError(t('admin.generalError'));
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handlePreview = (dealData: Partial<Deal>) => {
    // Create a temporary ID for preview
    const previewId = uuidv4();
    
    // Create a complete deal object for preview
    const previewDealData: Deal = {
      id: previewId,
      title: dealData.title || 'Preview Title',
      description: dealData.description || 'Preview Description',
      originalPrice: dealData.originalPrice || 0,
      discountedPrice: dealData.discountedPrice || 0,
      discountPercentage: dealData.discountPercentage || 0,
      imageUrl: dealData.imageUrl || 'https://images.unsplash.com/photo-1558591710-4b4a1ae0f04d?q=80&w=500&auto=format&fit=crop',
      category: dealData.category || 'other',
      source: dealData.source || 'Preview Source',
      link: dealData.link || 'https://example.com',
      date: dealData.date || new Date().toISOString().split('T')[0],
      media: dealData.media || [],
      translations: dealData.translations || {}
    };
    
    // Store the preview deal for rendering
    setPreviewDeal(previewDealData);
    
    // Add to localStorage temporarily for the preview route to access
    const previews = JSON.parse(localStorage.getItem('dealfinder_previews') || '[]');
    localStorage.setItem('dealfinder_previews', JSON.stringify([...previews, previewDealData]));
    
    // Open preview in a new tab
    if (typeof window !== 'undefined') {
      window.open(`/deal/${previewId}`, '_blank');
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-brand-light-accent dark:text-white mb-6">
        {t('admin.createDeal')}
      </h1>
      
      {error && (
        <div className="mb-6 p-3 bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-300 rounded flex items-center">
          <AlertCircle size={18} className="mr-2" />
          {error}
        </div>
      )}
      
      {loading && (
        <div className="mb-6 p-3 bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-300 rounded flex items-center">
          <Loader size={18} className="mr-2 animate-spin" />
          {t('admin.saving')}...
        </div>
      )}
      
      <DealForm 
        onSubmit={handleSubmit} 
        onPreview={handlePreview}
        previewId={previewDeal?.id}
      />
    </div>
  );
}
